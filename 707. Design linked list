
typedef struct node {
  struct node* next;
  struct node* prev;
  int data;
}node;

typedef struct {
  node * head;
  node *tail;
  int len;
} MyLinkedList;



MyLinkedList* myLinkedListCreate() {
    return calloc(1,sizeof(MyLinkedList));
}

int myLinkedListGet(MyLinkedList* obj, int index) {
   node *p = obj->head;
   int i = 0;
   while(p!=NULL){
     if(i==index){
         return p->data;
     }
     i++;
     p=p->next;
   }
   return -1;
}

void myLinkedListAddAtHead(MyLinkedList* obj, int val) {
   node* t = malloc(sizeof(node));
  t->data = val;
  t->prev = NULL;
  t->next = obj->head;
  if(obj->head!=NULL) obj->head->prev = t;
  else obj->tail = t;
  obj->head = t;
  obj->len++;
}

void myLinkedListAddAtTail(MyLinkedList* obj, int val) {
  node* t = malloc(sizeof(node));
  t->data = val;
  t->prev = obj->tail;
  t->next = NULL;
  if(obj->tail!=NULL) obj->tail->next = t;
  else obj->head = t;
  obj->tail = t;
  obj->len++;

}

void myLinkedListAddAtIndex(MyLinkedList* obj, int index, int val) {
 node* t = malloc(sizeof(node));
  t->data = val;
  t->next = NULL;
  t->prev = NULL;
  if(index > obj->len || index < 0)return;
  if(obj->head == NULL){
    obj->head = t;
    obj->tail = t;
    obj->len++;
    return;
  }
  if(index == 0){
    obj->head->prev = t; 
    t->next = obj->head;
    obj->head = t;
  }
  else if(index == obj->len){
    t->prev = obj->tail;
    obj->tail->next = t;
    obj->tail = t;
  }
  else{ 
    node *c = obj->head;
    for(int i = 0;i < index;i++) c=c->next;
    t->next = c;
    t->prev = c->prev;
    if(c->prev != NULL) c->prev->next = t;
    c->prev=t;
  }
  obj->len++;
}

void myLinkedListDeleteAtIndex(MyLinkedList* obj, int index) {
   if(index >= obj->len||index<0 || obj->head==NULL) return;
   node *d = NULL;
   if(index == 0){
     d=obj->head;
     obj->head = obj->head->next;
     if(obj->head !=NULL) obj->head->prev = NULL;
     else obj->tail = NULL;
     free(d);
   }
   else if(index == obj->len -1){
      d=obj->tail;
      if(obj->tail->prev != NULL){
        obj->tail = obj->tail->prev;
        obj->tail->next = NULL;
      }
      else obj->head=NULL;
      free(d);
   }else{
     node* p = obj->head;
     for(int i =0;i < index;i++) p=p->next;
     d = p;
       p->next->prev = p->prev;
        p->prev->next = p->next;
        free(p);
   }
   obj->len--;

}

void myLinkedListFree(MyLinkedList* obj) {
   node *t;
   while(obj->head!=NULL){
     t = obj->head;
     obj->head = obj->head->next;
     free(t);
   }
   free(obj);
}

